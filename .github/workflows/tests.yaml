name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  run-tests:
    strategy:
      matrix:
        os: [macos-10.15, ubuntu-18.04, ubuntu-20.04, windows-2019]
        python-version: [3.8, 3.9]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install/update pip, wheel, and setuptools
        run: |
          pip install -U pip wheel setuptools
      - name: Install Ubuntu-specific dependencies
        if: ${{ matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-setuptools python3-wheel python3-venv libapt-pkg-dev
      - name: Install Ubuntu 18.04-specific dependencies
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          # pip 20.2 breaks python3-apt, so pin the version before building
          pip install -U pip==20.1
          pip install -U -r requirements-bionic.txt
      - name: Install Ubuntu 20.04-specific dependencies
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          pip install -U -r requirements-focal.txt
      - name: Install charmcraft and dependencies
        run: |
          pip install -U -r requirements-dev.txt
          pip install -e .
      - name: Run tests
        run: |
          pytest -ra tests

  snap-build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build snap
        uses: snapcore/action-build@v1
        id: snapcraft
      - name: Upload snap artifact
        uses: actions/upload-artifact@v2
        with:
          name: snap
          path: ${{ steps.snapcraft.outputs.snap }}

  snap-tests:
    needs: [snap-build]
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Download snap artifact
        uses: actions/download-artifact@v2
        with:
          name: snap
          path: snap-artifacts
      - name: Install snap
        run: |
          sudo snap install --classic --dangerous snap-artifacts/*.snap
          rm -rf snap-artifacts
      - name: Install test dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-setuptools python3-wheel python3-distutils
      - name: Install LXD dependency on 18.04
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          sudo apt remove -y lxd
          sudo snap install lxd
      - name: Refresh LXD dependency on 20.04
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo snap refresh lxd || echo "Cannot refresh LXD dependency, using $(lxd --version)"
      - name: Configured LXD
        run: |
          sudo groupadd --force --system lxd
          sudo usermod --append --groups lxd $USER
          sudo snap start lxd
          sudo lxd waitready --timeout=30
          sudo lxd init --auto
      - name: Run smoke tests
        run: |
          mkdir -p charm-smoke-test
          pushd charm-smoke-test
          charmcraft -v init --author testuser
          sg lxd -c "charmcraft -v pack"
          test -f *.charm
          test ! -d build
          unzip -l charm-smoke-test_*.charm | grep "venv/ops/charm.py"
          sg lxd -c "charmcraft -v clean"
          popd

          mkdir -p another-test
          pushd another-test
          sg lxd -c "charmcraft -v pack --project-dir ../charm-smoke-test"
          test -f *.charm
          test ! -d build
          test ! -d ../charm-smoke-test/build
          unzip -l charm-smoke-test_*.charm | grep "venv/ops/charm.py"
          sg lxd -c "charmcraft -v clean --project-dir ../charm-smoke-test"
          popd

          mkdir -p destructive-mode-tests
          pushd destructive-mode-tests
          source /etc/os-release
          charmcraft -v init --author testuser
          sed -i "s|20.04|$VERSION_ID|g" charmcraft.yaml
          charmcraft -v pack --destructive-mode
          test -f "destructive-mode-tests_ubuntu-$VERSION_ID-amd64.charm"
          popd

          mkdir -p build-packages-test
          pushd build-packages-test
          charmcraft -v init --author testuser
          sed -i "s|20.04|$VERSION_ID|g" charmcraft.yaml
          touch extra_file.txt
          cat <<- EOF >> charmcraft.yaml
          parts:
            charm:
              prime:
                - extra_file.txt
            hello:
              plugin: nil
              build-packages: [hello]
              override-build: |
                hello > "\$CHARMCRAFT_PART_INSTALL/hello.txt"
          EOF
          sg lxd -c "charmcraft -v pack"
          unzip -c build-packages-test_*.charm hello.txt | grep "^Hello, world!"
          sg lxd -c "charmcraft -v clean"
          rm *.charm
          sudo apt install -y hello
          charmcraft -v pack --destructive-mode
          unzip -c build-packages-test_*.charm hello.txt | grep "^Hello, world!"
          unzip -l build-packages-test_*.charm | grep "venv/ops/charm.py"
          popd

          mkdir -p python-packages-test
          pushd python-packages-test
          charmcraft -v init --author testuser
          sed -i "s|20.04|$VERSION_ID|g" charmcraft.yaml
          cat <<- EOF >> charmcraft.yaml
          parts:
            charm:
              charm-python-packages: [bump2version]
          EOF
          sg lxd -c "charmcraft -v pack"
          unzip -l python-packages-test_*.charm | grep "venv/bumpversion/__init__.py"
          popd

          sudo snap set charmcraft provider=lxd
          sudo snap set charmcraft provider=multipass
          if sudo snap set charmcraft provider=invalid; then
            echo "configure script failure"
            exit 1
          fi

  windows-build:
    runs-on: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install -U pyinstaller -r requirements.txt
      - name: Build
        run: |
          pyinstaller charmcraft.spec
      - name: Upload unsigned exe
        uses: actions/upload-artifact@v2
        with:
          name: snap
          path: dist\charmcraft.exe
      - name: Smoke test executable
        run: |
          mkdir my-charm
          cd my-charm
          ..\dist\charmcraft.exe version
          ..\dist\charmcraft.exe init --author "Charmcraft Team"
          ..\dist\charmcraft.exe clean
      - name: Build installer(s)
        env:
          INNOCC: C:\Program Files (x86)\Inno Setup 6\iscc.exe
          MAKEAPPX: C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\makeappx.exe
          SIGNTOOL: C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe
          TIMESTAMP_SERVICE: http://timestamp.digicert.com
        run: |
          windows\generate-self-signed-cert.ps1

          & $Env:SIGNTOOL sign /fd SHA256 /td SHA256 /tr $Env:TIMESTAMP_SERVICE /f test-signing.pfx /p Password1234 dist\charmcraft.exe
          & $Env:INNOCC windows\charmcraft.iss
          copy dist\charmcraft-installer.exe dist\charmcraft-installer-self-signed.exe
          echo "Test signing charmcraft inno installer..."
          & $Env:SIGNTOOL sign /fd SHA256 /td SHA256 /tr $Env:TIMESTAMP_SERVICE /f test-signing.pfx /p Password1234 dist\charmcraft-installer-self-signed.exe

          echo "Building charmcraft msix installer..."
          mkdir dist\msix
          copy dist\charmcraft.exe dist\msix\
          copy windows\charmcraft.png dist\msix\
          copy windows\AppxManifest.xml dist\msix\
          & $Env:MAKEAPPX pack /h SHA256 /d dist\msix /p dist\charmcraft-installer.msix

          echo "Test signing charmcraft msix installer..."
          & $Env:SIGNTOOL sign /fd SHA256 /td SHA256 /tr $Env:TIMESTAMP_SERVICE /f test-signing.pfx /p Password1234 dist\charmcraft-installer.msix
      - name: Upload installer(s)
        uses: actions/upload-artifact@v2
        with:
          name: installers
          path: |
            dist\charmcraft-installer-self-signed.exe
            dist\charmcraft-installer.msix
